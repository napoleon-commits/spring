<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.commits.napoleon</groupId>
  <artifactId>spring-boot</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  
  <parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.0.0.RELEASE</version>
	</parent>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
	</properties>

	<dependencies>

		<!-- Spring Boot Starters are a set of convenient dependency descriptors 
			that you can include in your application. You get a one-stop-shop for all 
			the Spring and related technology that you need without having to hunt through 
			sample code and copy paste loads of dependency descriptors. For example, 
			if you want to get started using Spring and JPA for database access just 
			include the spring-boot-starter-data-jpa dependency in your project, and 
			you are good to go. -->

		<!-- The Spring Boot Actuator brings production-ready features to our application. 
			Monitoring our app, gathering metrics, understanding traffic or the state 
			of our database becomes trivial with this dependency. The main benefit of 
			this library is that we can get production grade tools without having to 
			actually implement these features ourselves. Actuator is mainly used to expose 
			operational information about the running application. Operation data such 
			as health, metrics, info, dump, env, etc. It uses HTTP endpoints or JMX beans 
			to enable us to interact with it. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>

		<!-- Implementing a data access layer of an application has been cumbersome 
			for quite a while. Too much boilerplate code has to be written to execute 
			simple queries as well as perform pagination, and auditing. Spring Data JPA 
			aims to significantly improve the implementation of data access layers by 
			reducing the effort to the amount thatâ€™s actually needed. As a developer 
			you write your repository interfaces, including custom finder methods, and 
			Spring will provide the implementation automatically. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>

		<!-- Spring Boot includes an additional set of tools that can make the 
			application development experience a little more pleasant. This dependency 
			can be included in any project to provide additional development-time features. 
			Such as Automatic Restart, Live Reload, and more. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<optional>true</optional>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>com.oracle</groupId>
			<artifactId>ojdbc7</artifactId>
			<version>11.2.0</version>
		</dependency>
	</dependencies>
</project>